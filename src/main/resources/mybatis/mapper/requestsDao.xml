<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.intranet.dao.IRequestsDao">

    <!--발신목록-->
    <select id="selectRequestsList" parameterType="com.example.intranet.dto.MemberRequestsDto">
        select
            mr.*
             , m.name as mname, m.position as mposition
             , m2.name as cname, m2.position as cposition
        from member_requests mr
                 left join member m on m.midx = mr.midx
                 left join member m2 on m2.midx = mr.confirm_midx
        where
            mr.midx=#{midx}
            <if test="type == 'title'">
                and mr.title like concat('%', #{key}, '%')
            </if>
            <if test="type == 'titleContent'">
                and (mr.title like concat('%', #{key}, '%') OR mr.content like concat('%', #{key}, '%'))
            </if>
            <if test="type == 'name'">
                and m2.name like concat('%', #{key}, '%')
            </if>
        order by
            <choose>
                <when test="sort == 'category'">mr.category</when>
                <when test="sort == 'title'">mr.title</when>
                <when test="sort == 'confirm_midx'">m2.name</when>
                <when test="sort == 'status'">mr.status</when>
                <otherwise>mr.writedate</otherwise>
            </choose>
            <choose>
                <when test="dir == 'asc'">asc</when>
                <otherwise>desc</otherwise>
            </choose>
    </select>

    <!--기안서작성폼-->
    <insert id="insertRquests" parameterType="com.example.intranet.dto.MemberRequestsDto">
        insert into member_requests ( category, midx, title, confirm_midx, content, fidx)
        values (#{category}, #{midx}, #{title}, #{confirm_midx}, #{content}, #{fidx})
    </insert>

    <!--발신목록 상세보기-->
    <select id="selectRequestsDetail" parameterType="com.example.intranet.dto.MemberRequestsDto">
        select
            mr.*,
            f.path AS path,
            f.originalname AS originalname
        from member_requests mr
                 left join file f on f.fidx = mr.fidx
        where ridx=#{ridx}
    </select>

    <select id="getAllMembers" resultType="com.example.intranet.dto.MemberDto">
        select * from member
    </select>

    <select id="getUser4" resultType="com.example.intranet.dto.MemberDto">
        select * from member where midx=#{confirm_midx}
    </select>

    <!--수신목록-->
    <!--나(로그인유저)를결재자로선택한목록보기-->
    <select id="selectGetList" parameterType="com.example.intranet.dto.MemberRequestsDto">
        SELECT
        mr.*,
        m.name AS mname,
        m.position AS mposition,
        m2.name AS cname,
        m2.position AS cposition
        FROM member_requests mr
        LEFT JOIN member m ON m.midx = mr.midx
        LEFT JOIN member m2 ON m2.midx = mr.confirm_midx
        where
            mr.confirm_midx=#{midx}
            <if test="type == 'title'">
                and mr.title like concat('%', #{key}, '%')
            </if>
            <if test="type == 'titleContent'">
                and (mr.title like concat('%', #{key}, '%') OR mr.content like concat('%', #{key}, '%'))
            </if>
            <if test="type == 'name'">
                and m2.name like concat('%', #{key}, '%')
            </if>
        order by
            <choose>
                <when test="sort == 'category'">mr.category</when>
                <when test="sort == 'title'">mr.title</when>
                <when test="sort == 'midx'">m.name</when>
                <when test="sort == 'status'">mr.status</when>
                <otherwise>mr.writedate</otherwise>
            </choose>
            <choose>
                <when test="dir == 'asc'">asc</when>
                <otherwise>desc</otherwise>
            </choose>
    </select>

    <!--수신목록 상세보기-->
    <select id="selectGetDetail" resultType="com.example.intranet.dto.MemberRequestsDto">
        SELECT
            mr.*,
            m.name AS mname, m.position AS mposition,
            m2.name AS cname, m2.position AS cposition,
            f.path AS path,
            f.originalname AS originalname
        FROM member_requests mr
                 LEFT JOIN member m ON m.midx = mr.midx
                 LEFT JOIN member m2 ON m2.midx = mr.confirm_midx
                 LEFT JOIN file f ON f.fidx = mr.fidx
        WHERE mr.ridx = #{ridx}
    </select>

    <!--상태값변경-->
    <update id="updateChangeStatus" parameterType="map">
        update member_requests
        set status=#{status}, confirmdate = NOW()
        where ridx=#{ridx}
    </update>

    <delete id="deleteRequests">
        delete from member_requests where ridx=#{ridx}
    </delete>

</mapper>